{
  "name": "judgment_summarizer",
  "description": "With this tool you can retrieve the summary of an ECJ judgment. You must enter the ECLI of the respective ECJ judgment. The tool only provides the summary of one judgment at a time.",
  "color": "linear-gradient(rgb(205,59,34), rgb(138,36,10))",
  "iconSrc": "",
  "schema": "[{\"id\":0,\"property\":\"ECLI\",\"description\":\"ECLI des jeweiligen Urteils.\",\"type\":\"string\",\"required\":false}]",
  "func": "const HOST = 'XXXX';\nconst USER = 'XXXX';\nconst PASSWORD = 'XXXX';\nconst DATABASE = 'XXXX';\nconst TABLE = 'Judgments';\nconst mysql = require('mysql2/promise');\nlet result;\n\n/**\n * Führt eine SQL-Abfrage aus, um die text_summary_de basierend auf dem gegebenen ECLI zu erhalten.\n * @param {string} ecli - Der ECLI-Wert, nach dem gesucht werden soll.\n * @returns {Promise<void>}\n */\nasync function getSQLResult(ecli) {\n  try {\n    // Erstellen Sie einen Verbindungspool zur Datenbank\n    const pool = mysql.createPool({\n      host: HOST,\n      user: USER,\n      password: PASSWORD,\n      database: DATABASE,\n      waitForConnections: true,\n      connectionLimit: 10,\n      queueLimit: 0\n    });\n\n    // Definieren Sie die parametrische SQL-Abfrage, um SQL-Injection zu vermeiden\n    const sqlQuery = `SELECT text_summary_de FROM \\`${TABLE}\\` WHERE ecli = ?`;\n\n    // Führen Sie die Abfrage mit dem bereitgestellten ECLI-Wert aus\n    const [rows] = await pool.execute(sqlQuery, [ecli]);\n\n    // Schließen Sie den Pool, um Ressourcen freizugeben\n    await pool.end();\n\n    // Formatieren Sie das Ergebnis entsprechend den Anforderungen\n    if (rows.length > 0) {\n      // Falls mehrere Ergebnisse erwartet werden, können Sie sie nach Bedarf verarbeiten\n      // Hier nehmen wir das erste gefundene Ergebnis\n      const summary = rows[0].text_summary_de;\n      result = `------\nECLI: ${ecli}\nZusammenfassung: ${summary}\n------`;\n    } else {\n      result = `------\nECLI: ${ecli}\nZusammenfassung: Keine Zusammenfassung für ECLI ${ecli} gefunden.\n------`;\n    }\n  } catch (error) {\n    console.error('Datenbankfehler:', error);\n    result = `------\nECLI: ${ecli}\nZusammenfassung: Ein Fehler ist bei der Datenbankabfrage aufgetreten.\n------`;\n  }\n}\n\n/**\n * Hauptfunktion, die die SQL-Abfrage mit dem Eingabeparameter ausführt.\n */\nasync function main() {\n  // Annahme: $ECLI wird als Umgebungsvariable oder über den Flowise-Eingabeparameter bereitgestellt\n  const ecli = $ECLI;\n\n  // Validieren Sie den Eingabeparameter, falls erforderlich\n  if (!ecli) {\n    result = `------\nECLI: Nicht angegeben\nZusammenfassung: Kein ECLI-Wert angegeben.\n------`;\n    return;\n  }\n\n  // Führen Sie die SQL-Abfrage aus\n  await getSQLResult(ecli);\n}\n\n// Starten Sie die Hauptfunktion\nawait main();\n\n// Geben Sie das Ergebnis zurück\nreturn result;\n"
}