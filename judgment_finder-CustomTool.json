{
  "name": "judgment_finder",
  "description": "This tool is able to search for a specific judgment of the European Court of Justice and receive a summary of that judment. To retrieve a judgment it needs the ECLI or docket number (Aktenzeichen) as search_word.",
  "color": "linear-gradient(rgb(226,117,60), rgb(239,10,65))",
  "iconSrc": "",
  "schema": "[{\"id\":0,\"property\":\"search_word\",\"description\":\"Could be either the ECLI or the docket number of the repective judment.\",\"type\":\"string\",\"required\":false}]",
  "func": "const HOST = 'XXXX';\nconst USER = 'XXXX';\nconst PASSWORD = 'XXXX';\nconst DATABASE = 'XXXX';\nconst TABLE = 'Judgments';\n\nconst mysql = require('mysql2/promise');\nlet result;\n\n// Maximale Anzahl von Ergebnissen und Zusammenfassungslänge definieren\nconst MAX_RESULTS = 10;\nconst MAX_SUMMARY_LENGTH = 1000;\n\n/**\n * Führt eine SQL-Abfrage aus, um die Zusammenfassung basierend auf dem gegebenen Suchwort (ECLI oder case_no) zu erhalten.\n * @param {string} search_word - Der Suchbegriff, der entweder mit 'ECLI' beginnt oder ein Aktenzeichen ist.\n * @returns {Promise<void>}\n */\nasync function getSQLResult(search_word) {\n  let pool;\n  try {\n    pool = mysql.createPool({\n      host: HOST,\n      user: USER,\n      password: PASSWORD,\n      database: DATABASE,\n      waitForConnections: true,\n      connectionLimit: 10,\n      queueLimit: 0\n    });\n\n    let sqlQuery;\n    let params;\n\n    if (search_word.startsWith('ECLI')) {\n      // Suche nach exakt passender ECLI\n      sqlQuery = `SELECT text_summary_de, ecli, date_decided, case_no FROM \\`${TABLE}\\` WHERE ecli = ? LIMIT 1`;\n      params = [search_word];\n    } else {\n      // Suche nach passenden Aktenzeichen mit LIKE und Begrenzung der Ergebnisse\n      sqlQuery = `SELECT text_summary_de, ecli, date_decided, case_no FROM \\`${TABLE}\\` WHERE case_no LIKE CONCAT('%', ?, '%') LIMIT ${MAX_RESULTS}`;\n      params = [search_word];\n    }\n\n    const [rows] = await pool.execute(sqlQuery, params);\n\n    if (rows.length > 0) {\n      // Mehrere Ergebnisse sind möglich. Jedes Ergebnis formatieren.\n      let output = '';\n      for (const row of rows) {\n        let summary = row.text_summary_de || 'Keine Zusammenfassung verfügbar.';\n        if (summary.length > MAX_SUMMARY_LENGTH) {\n          summary = summary.substring(0, MAX_SUMMARY_LENGTH) + '...';\n        }\n        const ecli = row.ecli || 'Kein ECLI verfügbar';\n        const case_no = row.case_no || 'Kein Aktenzeichen verfügbar';\n        const date = row.date_decided \n          ? new Date(row.date_decided).toLocaleDateString('de-DE') \n          : 'Kein Datum verfügbar';\n        const url = `https://curia.chat/view/${ecli}`; // Direktes Einfügen ohne Encoding\n\n        // Formatierung mit Absätzen zwischen den Informationen\n        output += `------\nECLI: ${ecli}\n\nAktenzeichen: ${case_no}\n\nDatum: ${date}\n\nURL: ${url}\n\nZusammenfassung: ${summary}\n------\\n`;\n      }\n      result = output.trim();\n    } else {\n      // Keine passenden Einträge gefunden\n      result = `------\nSuchbegriff: ${search_word}\nKeine passenden Einträge gefunden.\n------`;\n    }\n  } catch (error) {\n    console.error('Datenbankfehler:', error);\n    result = `------\nSuchbegriff: ${search_word}\nZusammenfassung: Ein Fehler ist bei der Datenbankabfrage aufgetreten. Details: ${error.message}\n------`;\n  } finally {\n    if (pool) {\n      await pool.end();\n    }\n  }\n}\n\n/**\n * Hauptfunktion, die die SQL-Abfrage mit dem Eingabeparameter ausführt.\n */\nasync function main() {\n  // Annahme: $search_word wird als Umgebungsvariable oder über den Flowise-Eingabeparameter bereitgestellt\n  const search_word = $search_word;\n\n  // Validierung\n  if (!search_word) {\n    result = `------\nSuchbegriff: Nicht angegeben\nZusammenfassung: Kein Suchbegriff angegeben.\n------`;\n    return;\n  }\n\n  // Führe die SQL-Abfrage aus\n  await getSQLResult(search_word);\n}\n\n// Starten Sie die Hauptfunktion\nawait main();\n\n// Geben Sie das Ergebnis zurück\nreturn result;"
}